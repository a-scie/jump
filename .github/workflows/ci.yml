name: CI
on:
  push:
    branches-ignore:
      - dependabot/**
  pull_request:
defaults:
  run:
    shell: bash
concurrency:
  group: CI-${{ github.ref }}
  # Queue on all branches and tags, but only cancel overlapping PR burns.
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') }}
jobs:
  org-check:
    name: Check GitHub Organization
    if: github.repository_owner == 'a-scie'
    runs-on: ubuntu-24.04
    steps:
      - name: Noop
        run: "true"
  ci:
    name: ${{ matrix.name }} CI
    needs: org-check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # N.B.: macos-14 is the oldest non-deprecated ARM Mac runner.
        include:
          - os: ubuntu-24.04
            name: Linux x86-64 (glibc)
          - os: ubuntu-24.04
            name: Linux x86-64 (musl)
            cross-target: x86_64-unknown-linux-musl
            docker-platform: linux/amd64
          - os: ubuntu-24.04
            name: Linux aarch64 (musl)
            cross-target: aarch64-unknown-linux-musl
            docker-platform: linux/arm64
          - os: ubuntu-24.04
            name: Linux armv7l (musl)
            cross-target: armv7-unknown-linux-musleabihf
            docker-platform: linux/arm/v7
          - os: ubuntu-24.04
            name: Linux riscv64
            cross-target: riscv64gc-unknown-linux-gnu
            docker-platform: linux/riscv64
          - os: ubuntu-24.04
            name: Linux s390x
            cross-target: s390x-unknown-linux-gnu
            docker-platform: linux/s390x
          - os: ubuntu-24.04
            name: Linux powerpc64le
            cross-target: powerpc64le-unknown-linux-gnu
            docker-platform: linux/ppc64le
          - os: macos-x86_64
            name: macOS x86-64
          - os: macos-14
            name: macOS aarch64
          - os: windows-2022
            name: Windows x86-64
          - os: windows-11-arm
            name: Windows aarch64
    steps:
      - uses: actions/checkout@v4
      - name: Install rustup on Windows ARM
        if: matrix.os == 'windows-11-arm'
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Check Formatting
        if: matrix.cross-target == ''
        run: |
          rustup toolchain add nightly -c rustfmt
          cargo +nightly fmt --check --all
      - name: Install Cross
        if: matrix.cross-target != ''
        run: |
          cargo install cross --locked \
            --git https://github.com/cross-rs/cross --rev e281947ca900da425e4ecea7483cfde646c8a1ea
      - name: Lint
        if: matrix.cross-target == ''
        run: cargo clippy --locked --all
      - name: Lint
        if: matrix.cross-target != ''
        run: cross clippy --locked --all --target ${{ matrix.cross-target }}
      - name: Unit Tests
        if: matrix.cross-target == ''
        run: cargo test --all
      - name: Unit Tests
        if: matrix.cross-target != ''
        run: cross test --all --target ${{ matrix.cross-target }}
      - name: Build & Package
        if: matrix.cross-target == ''
        run: cargo run -p package
      - name: Build & Package
        if: matrix.cross-target != '' && matrix.docker-platform != 'linux/ppc64le'
        run: cross run -p package --target ${{ matrix.cross-target }}
      - name: Integration Tests
        if: matrix.cross-target == ''
        run: examples/run.sh --no-package
      - name: Setup QEMU
        if: matrix.cross-target != ''
        run: docker run --privileged --rm tonistiigi/binfmt --install all
      - name: Integration Tests
        if: matrix.cross-target != '' && matrix.docker-platform == 'linux/ppc64le'
        run: |
          # We run into illegal instruction errors using the scie-jump built via cross; so we avoid
          # that and add rust to the target image to ensure it builds a compatible scie-jump to
          # execute in the container.
          docker run --rm \
            -v $PWD:/code \
            -w /code \
            --platform ${{ matrix.docker-platform }} \
            ubuntu:24.04 \
              bash -c "
                apt-get update &&
                apt-get --no-install-recommends install -y \
                  ca-certificates \
                  curl \
                  gcc \
                  git \
                  jq \
                  libc6-dev &&
                git config --global --add safe.directory /code &&
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
                  | sh -s -- -y --profile minimal &&
                . "\$HOME/.cargo/env" &&
                ./examples/run.sh
              "
      - name: Integration Tests
        if: matrix.cross-target != '' && matrix.docker-platform != 'linux/ppc64le'
        run: |
          docker run --rm \
            -v $PWD:/code \
            -w /code \
            --platform ${{ matrix.docker-platform }} \
            ubuntu:24.04 \
              bash -c "
                apt-get update &&
                apt-get --no-install-recommends install -y git jq curl ca-certificates &&
                git config --global --add safe.directory /code &&
                ./examples/run.sh --no-package
              "
